rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      
      match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
      }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
      }

      match /teams/{teamId} {
      	allow read;
        allow create: if canCreateTeam(teamId);
      }
      
      match /teamnames/{teamname} {
      	allow read;
        allow create: if canCreateTeamname();
      }

      match /sailorElo/{sailorID} {
      	allow read;
        allow create: if true;
      }

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        
        return isOwner && createdValidUsername;
      }
      
      function isValidUsername(username) {
				let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isOwner && isValidLength && isValidUserDoc;     
      }

      function canCreateTeam(userId) {
        let isOwner = request.auth.uid == userId;
        //let isValidName = request.resource.data
      	let teamname = request.resource.data.username;
        let createdValidTeamname = existsAfter(/databases/$(database)/documents/teamnames/$(teamname));
        
        return isOwner && createdValidTeamname;
      }
      function canCreateTeamname() {
        let isOwner = request.auth.uid == request.resource.data.uid;
        //let isValidName = request.resource.data
        //let isValidTeamDoc = getAfter(/databases/$(database)/documents/teams/$(request.auth.uid)).data.teamname == teamname;        
        return isOwner;
      }

    }
  }
}